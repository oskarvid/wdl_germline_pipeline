akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}
backend {
  default = "Local"
  providers {
    Local {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config {
      		run-in-background = true
      		submit = "/bin/bash ${script}"
      		concurrent-job-limit = 12
      		system.new-workflow-poll-rate = 10s
      		system.max-workflow-launch-count = 2

          filesystems {
              local {
              				localization: [
    				"soft-link", "hard-link", "copy"
    			]

      			caching {
      			  # When copying a cached result, what type of file duplication should occur. Attempted in the order listed below:
      			  duplication-strategy: [
      				"soft-link"
      			  ]

      			  # Possible values: file, path
      			  # "file" will compute an md5 hash of the file content.
      			  # "path" will compute an md5 hash of the file path. This strategy will only be effective if the duplication-strategy (above) is set to "soft-link",
      			  # in order to allow for the original file path to be hashed.
      			  hashing-strategy: "path"

      			  # When true, will check if a sibling file with the same name and the .md5 extension exists, and if it does, use the content of this file as a hash.
      			  # If false or the md5 does not exist, will proceed with the above-defined hashing strategy.
      			  check-sibling-md5: true
      			}
    		  }
        }
      }
    }
  }
}

call-caching {
  enabled = true
  lookup-docker-hash = false
  invalidate-bad-cache-results = true
  write_to_cache = true
  read_from_cache = true
}

database {
  profile = "slick.jdbc.MySQLProfile$"
  db {
    url = "jdbc:mysql://172.17.0.2/cromwell_db?useSSL=false&rewriteBatchedStatements=true"
    user = "cromwell"
    password = "cromwell"
    driver = "com.mysql.jdbc.Driver" 
    connectionTimeout = 5000
  }
}
